if whence brew >/dev/null; then
    source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
else
    source ~/.zsh/zsh-vi-mode/zsh-vi-mode.plugin.zsh
fi

# The clang python binding searches for header files in /usr/include by default.
# MacOS System Integrity Protection prevents the cration of /usr/include (even by root).
# Updating CPATH tells the clang python binding where to find the C headers.
# You need to have the command line tools installed for this to work.
# They will not be pressent after an OS upgrade. Use xcode-select --install to install them.
if whence xcrun >/dev/null; then
    export CPATH=`xcrun --show-sdk-path`/usr/include
fi

# add the user base's binary directory to the path to allow binaries to be installed
# using `pip3 --user` (reduces risk of breaking system-wide packages)
export PATH=$PATH:$(python3 -m site --user-base)/bin

# add cargo binaries to the path to access rusty CLIs (rg, fd, fzf etc.)
export PATH=$PATH:$HOME/.cargo/bin

# source extensions
if whence brew >/dev/null; then
    zvm_after_init_commands+=('source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh')
else
    zvm_after_init_commands+=('source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh')
    source ~/.zsh/gitstatus-prompt.zsh
fi

# set default editor to neovim (used for e.g. commit messages)
export EDITOR=nvim
# set the shell to zsh
export SHELL=$(which zsh)

## AUTOCOMPLETION

# the description for options that are not described by the completion functions
zstyle ':completion:*' auto-description 'specify: %d'
# the completion functions to use
zstyle ':completion:*' completer _expand _complete _correct _approximate
# show what type we are completing (e.g. command vs file)
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' verbose true

# Completion options can be grouped by type (displayed in different lists).
# If the empty string is given  all matches of different types will be displayed seperatley.
zstyle ':completion:*' group-name ''

# select from a menu if there are more than 2 options
zstyle ':completion:*' menu select=2
# only use menu if the options don't fit on the screen
zstyle ':completion:*' menu select=long

# set colors of automcompletion options based on the dircolors command if available
# otherwise use the BSD (macOS) alternative
if whence dircolors >/dev/null; then
    eval $(dircolors ~/.dir_colors)
else
    eval $(gdircolors ~/.dir_colors)
    export LSCOLORS="ExgxdxGxGxDxdxHxHxHeEx"
    export CLICOLOR=1
fi


zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''

# case insensitive completion matching
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}'

# modified plz completion script to not add spaces after path completions
_plz_complete_zsh() {
    local args=("${words[@]:1:$CURRENT}")
    local IFS=$'\n'
    local completions=($(GO_FLAGS_COMPLETION=1 ${words[1]} -p -v 0 --noupdate "${args[@]}"))
    for completion in $completions; do
        compadd -S '' $completion
    done
}


# activate zsh auto-completions
autoload -Uz compinit
compinit

compdef _plz_complete_zsh plz

## HISTORY

setopt histignorealldups sharehistory

export HISTSIZE=1000
export SAVEHIST=1000
export HISTFILE=~/.zsh_history

# ALIASES
alias t="tmux new-session -A -s main"
alias d="cd ~/.dotfiles"
alias oops="git add --update && git commit -v --no-edit --amend"

# replace ls with a more modern replacement
alias ls="exa --classify "
alias la="exa --classify --all"
alias ll="exa --header --classify --all --long"

# use neovim instead of vim
alias vi=nvim
alias fo="nvim '+Telescope oldfiles'"

# open neovim with the list of conflicts in the quickfix
alias conflicts='nvim -q <(git diff --name-only --diff-filter=U | sed -e "s@^@$(git rev-parse --show-toplevel)/@" -e "s/$/:1:conflicts/" | xargs realpath --relative-to $(pwd)) +copen'

# select a branch to checkout from a list of all local branches
function gcb {
    if [ "$1" ]; then
        BRANCH=$(git branch | fzf --query=$1)
    else
        BRANCH=$(git branch | fzf)
    fi

    if [ "$BRANCH" ]; then
        git checkout $(echo $BRANCH | sed 's/^ *//g')
    fi
}

alias gc-='git checkout -'
alias gcm='git checkout master'
alias gc@='git checkout @{u}'
alias gs='git status'
alias gap='git add . --patch'
alias gd='git diff @{u}'
alias gp='git pull'

function qf {
    nvim -q <(rg --column $@) +":copen"
}

# FZF

# use ripgrep for fuzzy finding
export FZF_DEFAULT_COMMAND='rg --files --hidden'

# Use ~~ as the trigger sequence instead of the default **
export FZF_COMPLETION_TRIGGER='~~'

zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')


export BAT_THEME="Nord"

# URL ESCAPING
autoload -U url-quote-magic bracketed-paste-magic
zle -N self-insert url-quote-magic
zle -N bracketed-paste bracketed-paste-magic

# NNN

export NNN_PLUG="p:preview-tui;f:fzcd"
export NNN_FIFO="/tmp/nnn.fifo"
# alias for nnn which makes ^G only cd
n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi
    NNN_TMPFILE="$HOME/.config/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    stty start undef
    stty stop undef
    # stty lwrap undef
    stty lnext undef

    nnn "$@"
    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# nord theme for nnn
# https://github.com/jarun/nnn/wiki/Themes
BLK="0B" CHR="0B" DIR="04" EXE="06" REG="00" HARDLINK="06" SYMLINK="06" MISSING="00" ORPHAN="09" FIFO="06" SOCK="0B" OTHER="06"
export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"

# KEY BINDINGS

# Set terminal keybindings to emacs (zsh may assume you want vim bindings if you set your editor to vim)
# This must be done before other keybindings otherwise other bindings will be overwritten in tmux

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
zle -N edit-command-line
zvm_after_init_commands+=('bindkey "^xe" edit-command-line')
zvm_after_init_commands+=('bindkey "^x^e" edit-command-line')

zvm_after_init_commands+=('bindkey "^p" history-beginning-search-backward')
zvm_after_init_commands+=('bindkey "^n" history-beginning-search-forward')

zvm_after_init_commands+=('bindkey "^ " autosuggest-accept')


# PROMPT - see ~/.config/starship.toml for config
eval "$(starship init zsh)"

# set tab width to 4 for stdout
tabs -4

# source local .zshrc
source ~/.zsh/.zshrc
